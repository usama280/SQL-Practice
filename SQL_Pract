--Basic - P1
CREATE TABLE student (
    student_id INT,
    name VARCHAR(20),
    major VARCHAR(20),

    PRIMARY KEY(student_id)
);

DESCRIBE student;

DROP TABLE student;

--P2
ALTER TABLE student ADD gpa DECIMAL(3,2);

ALTER TABLE student DROP gpa;

--P3
INSERT INTO student VALUES(1, 'Jack', 'Bio');
INSERT INTO student VALUES(2, 'Kate', 'Bio');
INSERT INTO student(student_id,name) VALUES(3, 'Pat');
SELECT * FROM student;

DROP TABLE student2;
--P4
CREATE TABLE student2(
    student_id INT PRIMARY KEY,
    name VARCHAR(20) NOT NULL,
    major VARCHAR(20) UNIQUE,
    gpa DOUBLE(3,2) DEFAULT '0.0'
);

INSERT INTO student2 VALUES(1, 'Jack', 'Bio', 3.1);
INSERT INTO student2 VALUES(2, 'Kate', 'Bio', 4.0);--cant do
INSERT INTO student2 VALUES(3, NULL, 'Chem');--cant do
INSERT INTO student2(student_id,name) VALUES(4, 'Pat');
SELECT * FROM student2;


DROP TABLE student3;
--P5
CREATE TABLE student3(
    student_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(20) NOT NULL,
    major VARCHAR(20) UNIQUE,
    gpa DOUBLE(3,2) DEFAULT '0.0'
);

INSERT INTO student3 VALUES(1, 'Jack', 'Bio', 3.1);
INSERT INTO student3 VALUES(2, 'Kate', 'Bio', 4.0);--cant do
INSERT INTO student3 VALUES(3, NULL, 'Chem');--cant do
INSERT INTO student3(name) VALUES('Pat');
SELECT * FROM student3;

--P6 -- CORE TABLE
DROP TABLE student4;

CREATE TABLE student4(
    student_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(20),
    major VARCHAR(20)
);

INSERT INTO student4(name, major) VALUES('Jack', 'Bio');
INSERT INTO student4(name, major) VALUES('Kate', 'Soc');
INSERT INTO student4(name, major) VALUES('Mat', 'Chem');
INSERT INTO student4(name, major) VALUES('Mike', 'Bio');
INSERT INTO student4(name, major) VALUES('Jack', 'Comp');

SELECT * FROM student4;

UPDATE student4
SET major = 'Biology'
WHERE major = 'Bio';

UPDATE student4
SET major = 'Update Maj'
WHERE student_id = 4;

UPDATE student4
SET major = 'SameMajor'
WHERE name = 'Jack' or name = 'Kate';

UPDATE student4
SET major = 'Undecided', name = 'Justin'
WHERE student_id = 5;

UPDATE student4
SET major = 'Undecided', name = 'Justin';

--P7
SELECT*FROM student4;

DELETE FROM student4
WHERE student_id = 5;

DELETE FROM student4;


--P8 - QUERIES
SELECT * FROM student4;

SELECT * FROM student4
LIMIT 2;

SELECT name, student4.major 
FROM student4
ORDER BY name DESC; --or ASC

SELECT *
FROM student4
ORDER BY name, student_id;

SELECT * FROM student4
WHERE major = 'Bio' or major = 'Comp';  

SELECT * FROM student4
WHERE major <> 'Bio';   --NOT EQUAL TO <> 

SELECT*FROM student4
WHERE name IN ('Clair', 'Mat');


--P9- ADVANCE

CREATE TABLE employee (
  emp_id INT PRIMARY KEY,
  first_name VARCHAR(40),
  last_name VARCHAR(40),
  birth_day DATE,
  sex VARCHAR(1),
  salary INT,
  super_id INT,
  branch_id INT
);

CREATE TABLE branch (
  branch_id INT PRIMARY KEY,
  branch_name VARCHAR(40),
  mgr_id INT,
  mgr_start_date DATE,
  FOREIGN KEY(mgr_id) REFERENCES employee(emp_id) ON DELETE SET NULL
);

ALTER TABLE employee
ADD FOREIGN KEY(branch_id)
REFERENCES branch(branch_id)
ON DELETE SET NULL;

ALTER TABLE employee
ADD FOREIGN KEY(super_id)
REFERENCES employee(emp_id)
ON DELETE SET NULL;

CREATE TABLE client (
  client_id INT PRIMARY KEY,
  client_name VARCHAR(40),
  branch_id INT,
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE SET NULL
);

CREATE TABLE works_with (
  emp_id INT,
  client_id INT,
  total_sales INT,
  PRIMARY KEY(emp_id, client_id),
  FOREIGN KEY(emp_id) REFERENCES employee(emp_id) ON DELETE CASCADE,
  FOREIGN KEY(client_id) REFERENCES client(client_id) ON DELETE CASCADE
);

CREATE TABLE branch_supplier (
  branch_id INT,
  supplier_name VARCHAR(40),
  supply_type VARCHAR(40),
  PRIMARY KEY(branch_id, supplier_name),
  FOREIGN KEY(branch_id) REFERENCES branch(branch_id) ON DELETE CASCADE
);

-- Corporate
INSERT INTO employee VALUES(100, 'David', 'Wallace', '1967-11-17', 'M', 250000, NULL, NULL);

INSERT INTO branch VALUES(1, 'Corporate', 100, '2006-02-09');

UPDATE employee
SET branch_id = 1
WHERE emp_id = 100;

INSERT INTO employee VALUES(101, 'Jan', 'Levinson', '1961-05-11', 'F', 110000, 100, 1);

-- Scranton
INSERT INTO employee VALUES(102, 'Michael', 'Scott', '1964-03-15', 'M', 75000, 100, NULL);

INSERT INTO branch VALUES(2, 'Scranton', 102, '1992-04-06');

UPDATE employee
SET branch_id = 2
WHERE emp_id = 102;

INSERT INTO employee VALUES(103, 'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);
INSERT INTO employee VALUES(104, 'Kelly', 'Kapoor', '1980-02-05', 'F', 55000, 102, 2);
INSERT INTO employee VALUES(105, 'Stanley', 'Hudson', '1958-02-19', 'M', 69000, 102, 2);

-- Stamford
INSERT INTO employee VALUES(106, 'Josh', 'Porter', '1969-09-05', 'M', 78000, 100, NULL);

INSERT INTO branch VALUES(3, 'Stamford', 106, '1998-02-13');

UPDATE employee
SET branch_id = 3
WHERE emp_id = 106;

INSERT INTO employee VALUES(107, 'Andy', 'Bernard', '1973-07-22', 'M', 65000, 106, 3);
INSERT INTO employee VALUES(108, 'Jim', 'Halpert', '1978-10-01', 'M', 71000, 106, 3);


-- BRANCH SUPPLIER
INSERT INTO branch_supplier VALUES(2, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Patriot Paper', 'Paper');
INSERT INTO branch_supplier VALUES(2, 'J.T. Forms & Labels', 'Custom Forms');
INSERT INTO branch_supplier VALUES(3, 'Uni-ball', 'Writing Utensils');
INSERT INTO branch_supplier VALUES(3, 'Hammer Mill', 'Paper');
INSERT INTO branch_supplier VALUES(3, 'Stamford Lables', 'Custom Forms');

-- CLIENT
INSERT INTO client VALUES(400, 'Dunmore Highschool', 2);
INSERT INTO client VALUES(401, 'Lackawana Country', 2);
INSERT INTO client VALUES(402, 'FedEx', 3);
INSERT INTO client VALUES(403, 'John Daly Law, LLC', 3);
INSERT INTO client VALUES(404, 'Scranton Whitepages', 2);
INSERT INTO client VALUES(405, 'Times Newspaper', 3);
INSERT INTO client VALUES(406, 'FedEx', 2);

-- WORKS_WITH
INSERT INTO works_with VALUES(105, 400, 55000);
INSERT INTO works_with VALUES(102, 401, 267000);
INSERT INTO works_with VALUES(108, 402, 22500);
INSERT INTO works_with VALUES(107, 403, 5000);
INSERT INTO works_with VALUES(108, 403, 12000);
INSERT INTO works_with VALUES(105, 404, 33000);
INSERT INTO works_with VALUES(107, 405, 26000);
INSERT INTO works_with VALUES(102, 406, 15000);
INSERT INTO works_with VALUES(105, 406, 130000);

--NOW LETS CHECK
SELECT * FROM employee;
SELECT * FROM branch;
SELECT * FROM client;
SELECT * FROM branch_supplier;
SELECT * FROM works_with;

SELECT * FROM employee
LIMIT 5;

SELECT first_name AS forname, last_name AS supplier_name
FROM employee;

SELECT DISTINCT sex
FROM employee;

SELECT COUNT(emp_id)
FROM employee;

SELECT COUNT(emp_id)
FROM employee
WHERE sex = 'F' and birth_day >'1971-01-01';

SELECT AVG(salary)
FROM employee;

SELECT SUM(salary)
FROM employee
WHERE sex = 'M';

SELECT COUNT(sex), sex
FROM employee
GROUP BY sex;

SELECT SUM(total_sales), emp_id
FROM works_with
GROUP BY emp_id; 


--LIKE
SELECT * FROM client
WHERE client_name LIKE '%LLC';

SELECT * FROM branch_supplier
WHERE supplier_name LIKE '%Labels';

SELECT * FROM employee
WHERE birth_day LIKE '____-10%';


--UNION
SELECT COUNT(*) 
FROM employee
UNION
SELECT COUNT(branch_name)
FROM branch;

SELECT
(SELECT COUNT(*) FROM employee) + (SELECT COUNT(*) FROM branch)
AS total;


SELECT employee.salary 
FROM employee
UNION 
SELECT works_with.total_sales
FROM works_with;

--JOIN
INSERT INTO branch VALUES(4, 'Buffalo', NULL, NULL);
SELECT*FROM branch;

SELECT emp_id, first_name, last_name, branch_name
FROM employee
JOIN branch
ON emp_id = mgr_id;
--OR
SELECT emp_id, first_name, last_name, branch_name
FROM employee, branch
WHERE emp_id = mgr_id;

--Left Join -- employee to the LEFT 
SELECT emp_id, first_name, last_name, branch_name
FROM employee
LEFT JOIN branch 
ON emp_id = mgr_id;

--Right Join -- branch to the RIGHT
SELECT emp_id, first_name, last_name, branch_name
FROM employee
RIGHT JOIN branch
ON emp_id = mgr_id;


--NESTED QUERIES
SELECT*FROM works_with;

CREATE TABLE q1 (
    SELECT SUM(total_sales) AS total_sales, emp_id
    FROM works_with
    GROUP BY emp_id
    HAVING SUM(total_sales) > 30000
);

SELECT first_name, last_name
FROM employee
WHERE emp_id IN(
    SELECT emp_id
    FROM q1 
);


SELECT first_name, last_name
FROM employee
WHERE emp_id IN(
    SELECT emp_id
    FROM works_with
    WHERE total_sales > 30000
);

SELECT client_name 
FROM client
WHERE branch_id = (
    SELECT branch_id
    FROM branch
    WHERE mgr_id = 102
    LIMIT 1
);


--Trigger
CREATE TABLE triggerTest(
    message VARCHAR(100)
);

--PUT THIS INTO CMD
DELIMITER $$
--PUT THIS INTO CMD
CREATE 
    TRIGGER my_trigger BEFORE INSERT
    ON employee
    FOR EACH ROW BEGIN
        INSERT INTO triggerTest VALUES(NEW.first_name);
    END$$
--PUT THIS INTO CMD
DELIMITER;

--LETS TEST IT
INSERT INTO employee
VALUES(109, 'Angela', 'Martin', '1971-06-25', 'F', 63000, 102, 2);

SELECT*FROM triggerTest;

